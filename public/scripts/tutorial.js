class Comment extends React.Component {
    rawMarkdownMarkup() {
        let rawMarkup = marked(this.props.children + '', {sanitize: true});
        return { __html: rawMarkup };
    }
    render() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">{this.props.author}</h2>
                <span dangerouslySetInnerHTML={this.rawMarkdownMarkup()} />
            </div>
        );
    }
}

class CommentList extends React.Component {
    render() {
        let commentNodes = this.props.data.map(comment => {
            return (
                <Comment key={comment.id} author={comment.author}>
                    {comment.message}
                </Comment>
            );
        });

        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
}

class CommentForm extends React.Component {
    constructor() {
        super();
        this.state = {
            author: '',
            message: ''
        };
    }

    handleAuthorChange(e) {
        this.setState({author: e.target.value});
    }

    handleMessageChange(e) {
        this.setState({message: e.target.value});
    }

    handleSubmit(e) {
        e.preventDefault();

        let author = this.state.author.trim();
        let message = this.state.message.trim();

        if (!author || !message) {
            return;
        }

        // parent will take care of submitting and reloading
        // list
        this.props.onCommentSubmit({author, message});

        this.setState({author: '', message: ''});
    }

    render() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit.bind(this)}>
                <input type="text" placeholder="Your Name" value={this.state.author} onChange={this.handleAuthorChange.bind(this)} />
                <input type="text" placeholder="Say something..." value={this.state.message} onChange={this.handleMessageChange.bind(this)} />
                <input type="submit" value="Post" />
            </form>
        );
    }
}

class CommentBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = {data: []};
    }

    handleCommentSubmit(comment) {
        let comments = this.state.data;

        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server.
        comment.id = Date.now();
        this.setState({data: [...comments, comment]});

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment
        })
        .done(data => this.setState({data}))
        .fail((xhr, status, e) => {
            // if the request fails we need to reset to the list w/o the new comment
            this.setState({data: comments});

            console.error(this.props.url, status, e);
        });
    }

    loadCommentsFromServer() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false
        })
        .done(data => this.setState({data}))
        .fail((xhr, status, e) => console.error(this.props.url, status, e));
    }

    componentDidMount() {
        this.loadCommentsFromServer();

        setInterval(
            () => this.loadCommentsFromServer(),
            this.props.pollInterval
        );
    }

    render() {
        return (
            <div className="commentBox">
                <h2>Comments</h2>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)} />
            </div>
        );
    }
}

ReactDOM.render(
    <CommentBox url="/api/comments" pollInterval={10000} />,
    document.getElementById('content')
);
